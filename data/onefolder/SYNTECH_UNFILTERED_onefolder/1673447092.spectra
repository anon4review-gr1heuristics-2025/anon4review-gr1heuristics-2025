import "./imports/DwyerPatterns.spectra"

spec CatchingIntruder
define D := 7;
type Dim = Int(0..D);

sys Dim robotX0;
sys Dim robotY0;
sys Dim robotX1;
sys Dim robotY1;
env Dim intruderX;
env Dim intruderY;

// initial places
gar ini robotX0= 0;
gar ini robotX1= 7;
gar ini robotY0= 0;
gar ini robotY1= 0;
asm ini intruderY=7;


//obstacles
predicate notOnObstacle(Dim rX, Dim rY, Dim oX, Dim oY):
	(rX != oX) |
	(rY != oY) 
	;

//robot0
gar alw notOnObstacle(robotX0, robotY0, 2,1);
gar alw notOnObstacle(robotX0, robotY0, 3,1);
gar alw notOnObstacle(robotX0, robotY0, 4,1);
gar alw notOnObstacle(robotX0, robotY0, 5,1);
//robot1
gar alw notOnObstacle(robotX1, robotY1, 2,1);
gar alw notOnObstacle(robotX1, robotY1, 3,1);
gar alw notOnObstacle(robotX1, robotY1, 4,1);
gar alw notOnObstacle(robotX1, robotY1, 5,1);
//intruder
asm alw notOnObstacle(intruderX, intruderY, 2,1);
asm alw notOnObstacle(intruderX, intruderY, 3,1);
asm alw notOnObstacle(intruderX, intruderY, 4,1);
asm alw notOnObstacle(intruderX, intruderY, 5,1);

// movement of robots and intruder
predicate moveDist(Dim posX, Dim posY):
  (posX+1 = next(posX) & posY   = next(posY))| //move right
  (posX   = next(posX) & posY   = next(posY))| // stay in place
  (posX-1 = next(posX) & posY   = next(posY))| // move left
  (posY+1 = next(posY) & posX = next(posX))  | // move up
  (posY-1 = next(posY) & posX = next(posX));  // move down

gar alw moveDist(robotX0, robotY0);
gar alw moveDist(robotX1, robotY1);
asm alw moveDist(intruderX, intruderY);



// robots can not crash and intruder also can not crash
gar alw robotX0 != robotX1 | robotY0 != robotY1;
asm alw robotX0 != intruderX | robotY0 != intruderY;
asm alw robotX1 != intruderX | robotY1 != intruderY;

gar alw robotX0 != intruderX | robotY0 != intruderY;
gar alw robotX1 != intruderX | robotY1 != intruderY;



predicate canNotSwitch(Dim posX0, Dim posY0, Dim posX1, Dim posY1):
	(((posX0 = posX1) & (posY0> posY1 )) -> next(posY0)>next(posY1))
	& (((posX0 = posX1) & (posY0< posY1 )) -> next(posY0)<next(posY1))
	& (((posY0 =posY1) & (posX0> posX1)) -> next(posX0)> next(posX1))
	&(((posY0 =posY1) & (posX0< posX1)) -> next(posX0)< next(posX1));

//gar alw canNotSwitch(robotX0, robotY0, robotX1, robotY1);
//gar alw canNotSwitch(robotX0, robotY0, intruderX, intruderY);
//gar alw canNotSwitch(robotX1, robotY1, intruderX, intruderY);

// robot 1 can not move until robot 0 reaches bottom left corner
//define
//  atBottomLeft :=  (robotX0=0) & (robotY0=7); 
//  move := (robotX1 != next(robotX1)) | (robotY1 != next(robotY1));
//  
//gar P_is_false_before_R( move,atBottomLeft);


counter robot1DontMove(0..2){
	robot1DontMove = 0;
	inc: (robotX0=0) & (robotY0=7);
	overflow: keep;
}

//gar alw robot1DontMove=0 -> robotX1 = next(robotX1) & robotY1 = next(robotY1);



// intruder try to escape from robots if needed

define
	atCorner := (intruderX = 0 & intruderY = 0) |
	 (intruderX = 0 & intruderY = 7)|
	 (intruderX = 7 & intruderY = 0)|
	 (intruderX = 7 & intruderY = 7);
	aboveObs := (intruderY =0) & (intruderX> 1) & (intruderX<6);  
	rob0close := (intruderX = robotX0 & (intruderY = robotY0+1 | intruderY = robotY0-1)) 
	| (intruderY = robotY0 & (intruderX = robotX0+1 | intruderX = robotX0-1));
	rob1close := (intruderX = robotX1 & (intruderY = robotY1+1 | intruderY = robotY1-1)) 
	| (intruderY = robotY1 & (intruderX = robotX1+1 | intruderX = robotX1-1));
// intruder has to stay in place
asm alw atCorner &  rob0close & rob1close -> next(intruderX)= intruderX & next(intruderY)= intruderY;     
asm alw aboveObs &  rob0close & rob1close -> next(intruderX)= intruderX & next(intruderY)= intruderY;
// intruder has to run away
asm alw (!aboveObs & !atCorner) &  (rob0close | rob1close) -> (next(intruderX)!= intruderX | next(intruderY)!= intruderY);

//sys boolean closeness;
//gar alw closeness = (!aboveObs & !atCorner) &  (rob0close | rob1close);

//sys boolean po;
//gar alw po = atCorner &  rob0close & rob1close;
//sys boolean p1;
//gar alw p1 = aboveObs &  rob0close & rob1close;



