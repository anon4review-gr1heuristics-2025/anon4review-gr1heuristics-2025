import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

//TODO: complete the specification
define
	charging := 		equalLocation(robotX, robotY, 4, 0);
	robotAtStart := 	robotX = 0 and  robotY = 0;
	robotOnTarget :=   	equalLocation(robotX, robotY, target1X, target1Y)
					or 	equalLocation(robotX, robotY, target2X, target2Y)
					or 	equalLocation(robotX, robotY, target3X, target3Y);
					
//Object Declaration

//Targets
env DimX target1X;
env DimY target1Y;
env DimX target2X;
env DimY target2Y;
env DimX target3X;
env DimY target3Y;

//Obstacles
env DimX obstacle1X;
env DimY obstacle1Y;
env DimX obstacle2X;
env DimY obstacle2Y;
env DimX obstacle3X;
env DimY obstacle3Y;
env DimX obstacle4X;
env DimY obstacle4Y;
env DimX obstacle5X;
env DimY obstacle5Y;

//Moving Obstacles
env DimX movingObstacleX;
env DimY movingObstacleY;

//Power
env boolean noPower;

//Blocked targets
env boolean blocked1;
env boolean blocked2;
env boolean blocked3;

gar robotStartAtTopLeft:
	ini robotAtStart;
	

gar robotMovesOneStepAtATime:
	alw moveDistX(robotX) and moveDistY(robotY);
	
	
//robotEventuallyGoesToTargets:
gar alwEv equalLocation(robotX, robotY, target1X, target1Y);
gar alwEv equalLocation(robotX, robotY, target2X, target2Y);
gar alwEv equalLocation(robotX, robotY, target3X, target3Y);

gar MovingObstacleNotCoverRobot:
	alw !equalLocation(robotX, robotY, movingObstacleX, movingObstacleY);

gar P_becomes_true_After_Q(charging, noPower);

counter countFullCharge(0..4){
	countFullCharge = 0;
	reset: !charging;
	inc: charging;
	overflow: false;
}

//Charge for 4 times
gar alw(countFullCharge < 4 and charging) -> wait(robotX, robotY);

//Robot is never on blocked targets ************************** maybe needs true = next blocked
gar alw next(blocked1) -> !equalLocation(robotX, robotY, target1X, target1Y);
gar alw next(blocked1) -> !equalLocation(robotX, robotY, target2X, target2Y);
gar alw next(blocked1) -> !equalLocation(robotX, robotY, target3X, target3Y);

gar P_becomes_true_After_Q(robotOnTarget, robotAtStart);

predicate wait(DimX dimX, DimY dimY):
	next(dimX) = dimX and
	next(dimY) = dimY;
	
predicate moveDistX(DimX pos):
	pos+1 = next(pos) |
	pos   = next(pos) |
	pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
	pos+1 = next(pos) |
	pos   = next(pos) |
	pos-1 = next(pos);
	
predicate equalLocation(DimX oneX, DimY oneY, DimX twoX, DimY twoY):
	oneX = twoX and oneY = twoY;
