import "./imports/DwyerPatterns.spectra"

spec EscapingGuard

define
D := 7;
robotAtTarget1 := (robot[0] = 0) & (robot[1] = 0);
robotAtTarget2 := (robot[0] = 7) & (robot[1] = 7);
robotAtTarget3 := (robot[0] = 0) & (robot[1] = 7);
robotAtObstacle1 := (robot[0] = 2) & (robot[1] = 2);
robotAtObstacle2 := (robot[0] = 2) & (robot[1] = 3);
robotAtObstacle3 := (robot[0] = 2) & (robot[1] = 4);
robotAtObstacle4 := (robot[0] = 2) & (robot[1] = 5);
robotAtAnyObstacle := robotAtObstacle1 | robotAtObstacle2 | robotAtObstacle3 | robotAtObstacle4;
robotIsCoveredByTheGuard := ((robot[0] = guard[0]) & (robot[1] = guard[1])) |
							   ((robot[0] = guard[0] + 1) & (robot[1] = guard[1])) |
							   ((robot[0] = guard[0]) & (robot[1] = guard[1] + 1)) |
							   ((robot[0] = guard[0] + 1) & (robot[1] = guard[1] + 1));

type Dim = Int(0..D);

sys Dim[2] robot;
env Dim[2] guard; // Representing the top left corner of the Guard Square

gar alw moveDist(robot[0]);
gar alw moveDist(robot[1]);
gar alw !robotAtAnyObstacle;
gar alw !robotIsCoveredByTheGuard;

gar ini robot[0] = 7;
gar ini robot[1] = 0;

gar alwEv robotAtTarget1;
gar alwEv robotAtTarget2;
gar alwEv robotAtTarget3;


gar P_becomes_true_between_Q_and_R(robotAtTarget2, robotAtTarget1, robotAtTarget3);

asm alw moveDist(guard[0]);
asm alw moveDist(guard[1]);

predicate moveDist(Dim pos):
	pos+1 = next (pos) |
	pos = next (pos) |
	pos-1 = next (pos);
