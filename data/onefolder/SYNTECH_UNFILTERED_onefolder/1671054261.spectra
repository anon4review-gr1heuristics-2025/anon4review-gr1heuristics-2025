import "./imports/DwyerPatterns.spectra"

spec Deliveries

define DX := 5;
define DY := 5;

type DimX = Int(0..DX);
type DimY = Int(0..DY);
type Coord = Int(0..DY);

sys DimX robotX0;
sys DimY robotY0;
sys DimX robotX1;
sys DimY robotY1;


//increment 1 - rooms request packages and robots are guaranteed to always get to them

env DimX package0X;
env DimY package0Y;
env DimX package1X;
env DimY package1Y;

define robot0atpackage := robotX0 = package0X & robotY0 = package0Y;
define robot1atpackage := robotX1 = package1X & robotY1 = package1Y;


gar robot0getspackage:
	alwEv robot0atpackage;
	
gar robot1getspackage:
	alwEv robot1atpackage;
	
//specification is realizable and well separated so this is the end of increment 1

//increment 2 - robots move one step at a time and change floors using the elevator
env DimY elevatorY;

predicate moveDist(DimX pos):
	pos+1= next(pos) | pos= next(pos) | pos-1= next(pos);

//guarantee that robots move one step at a time
gar robotsMoveOneStepAtATime:
	alw moveDist(robotX0) & moveDist(robotX1);

//guarantee that robots don't change floors outside of elevator
gar robot0DoesntJumpFloors:
	alw robotX0 != 0 -> robotY0 = next(robotY0);

gar robot1DoesntJumpFloors:
	alw robotX1 != 0 -> robotY1 = next(robotY1);

//guarantee that robots can only move in the first column with the elevator
gar robot0UsesElevator:
	alw robotX0 = 0 -> robotY0 = elevatorY;

gar robot1UsesElevator:
	alw robotX1 = 0 -> robotY1 = elevatorY;
	
	
	
	
	
	
	
	
	
	
	
	
	