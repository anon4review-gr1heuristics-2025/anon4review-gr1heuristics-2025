import "./imports/DwyerPatterns.spectra"

spec Deliveries

define DX := 5;
define DY := 5;

type DimX = Int(0..DX);
type DimY = Int(0..DY);
type Coord = Int(0..DY);

sys DimX robotX0;
sys DimY robotY0;
sys DimX robotX1;
sys DimY robotY1;

env DimY elevator;

predicate moveDistX(DimX pos):
	pos+1 = next(pos) or
	pos   = next(pos) or
	pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
	pos+1 = next(pos) or
	pos   = next(pos) or
	pos-1 = next(pos);
	
predicate elevatorMoveDistY(DimY pos):
	pos+1 = next(pos) or
	pos   = next(pos) or
	pos-1 = next(pos);
	
predicate equalLocation(DimX oneX, DimY oneY, DimX twoX, DimY twoY):
	oneX = twoX and oneY = twoY;

//Robots movement module
gar ini robotY0 = DX;
gar ini robotY1 = DX;

gar robot0MovesOneStepAtATime:
	alw moveDistX(robotX0) and moveDistY(robotY0);

gar robot1MovesOneStepAtATime:
	alw moveDistX(robotX1) and moveDistY(robotY1);
	
gar robot0MovesVerticalyOnlyOnElevator:
	alw robotX0 = 0 -> robotY0 = elevator;
	
gar robot0CantMoveVerticallyWithoutElevator:
	alw robotX0 != 0 -> next(robotY0) = robotY0;
	
gar robot1MovesVerticalyOnlyOnElevator:
	alw robotX1 = 0 -> robotY1 = elevator;
	
gar robot1CantMoveVerticallyWithoutElevator:
	alw robotX1 != 0 -> next(robotY1) = robotY1;
	
gar robotsCannotColide:
	alw !equalLocation(robotX0, robotY0, robotX1, robotY1);
	
gar alw robotX0 = 0 and next(robotX0) = 1 -> next(elevator) = next(robotY0);

//gar robotsNotColide:
//	alw robotY0 = robotY1 -> (robotX0 + robotX1) > 2;

gar alw robotY0 = robotY1 & robotX0 < robotX1 implies next(robotX0) <= next(robotX1);
gar alw robotY0 = robotY1 & robotX1 < robotX0 implies next(robotX1) <= next(robotX0);
	 
asm movingElevaotrOnlyOnY:
	alw elevatorMoveDistY(elevator);
	
asm alwEv elevator = 0;
asm alwEv elevator = DY;

env DimX lamp0X;
env DimY lamp0Y;
env DimX lamp1X;
env DimY lamp1Y;

asm lampMoveWhenReached:
	alw equalLocation(robotX0, robotY0, lamp0X, lamp0Y) -> lamp0Y != next(lamp0Y);

asm lamp1MoveWhenReached:
	alw equalLocation(robotX1, robotY1, lamp1X, lamp1Y) -> lamp1Y != next(lamp1Y);
	
asm lamp1DontMoveUntilReached:
	alw !equalLocation(robotX1, robotY1, lamp1X, lamp1Y) -> lamp1X = next(lamp1X) and lamp1Y = next(lamp1Y);

asm lamp0DontMoveUntilReached:
	alw !equalLocation(robotX0, robotY0, lamp0X, lamp0Y) -> lamp0X = next(lamp0X) and lamp0Y = next(lamp0Y);

gar alwEv equalLocation(robotX0, robotY0, lamp0X, lamp0Y);
gar alwEv equalLocation(robotX1, robotY1, lamp1X, lamp1Y);

define onPackage1 := robotX1 = lamp1X and robotY1 = lamp1Y;
	
counter package1Cnt(0..3){
	package1Cnt = 0;
	inc: onPackage1;
	reset: robotX1 = DX and robotY1 = DY;
	overflow: false;
}

//asm alw package1Cnt = 3 -> robotX1 = DX and robotY1 = DY;
//gar P_becomes_true_between_Q_and_R((robotX1 = DX and robotY1 = DY), package1Cnt = 0, package1Cnt = 3);
//asm P_becomes_true_between_Q_and_R((robotX1 = DX and robotY1 = DY), package1Cnt = 0, package1Cnt = 3);
//asm P_becomes_true_between_Q_and_R((robotX0 = DX and robotY0 = DY), package0Cnt = 0, package0Cnt = 3);
//asm alw next(package1Cnt) = 3 -> next(lamp0X) != 4 and next(lamp1X) != 4;

gar S_responds_to_P_globally((robotX1 = DX and robotY1 = DY), package1Cnt >= 3 );
gar S_responds_to_P_globally((robotX0 = DX and robotY0 = DY), package0Cnt >= 3 );

define onPackage0 := robotX0 = lamp0X and robotY0 = lamp0Y;
	
counter package0Cnt(0..3){
	package0Cnt = 0;
	inc: onPackage0;
	reset: robotX0 = DX and robotY0 = DY;
	overflow: false;
}

asm alw lamp0X != 0;
asm alw lamp1X != 0;
asm alw lamp0Y != DY;
asm alw lamp1Y != DY;

gar alwEv equalLocation(robotX1, robotY1, 5, 5);
gar alwEv equalLocation(robotX0, robotY0, 5, 5);


sys boolean elevatorAndGround0;
sys boolean elevatorAndGround1;

gar ini elevatorAndGround0 = false;
gar ini elevatorAndGround1 = false;

gar alw next(robotY0) = 5 and robotY0 < 5 -> next(elevatorAndGround0) = true;
gar alw next(robotY1) = 5 and robotY1 < 5 -> next(elevatorAndGround1) = true;

gar alw !(next(robotY1) = 5 & robotY1 < 5) -> next(elevatorAndGround0) = elevatorAndGround0;
gar alw !(next(robotY0) = 5 & robotY0 < 5) -> next(elevatorAndGround1) = elevatorAndGround1;

gar alw !elevatorAndGround0 or !elevatorAndGround1 -> !onPackage0 and !onPackage1;

asm alw onPackage0 & package0Cnt < 3 implies next(lamp0Y) != lamp0Y & next(lamp0Y) != 5;
asm alw onPackage1 & package1Cnt < 3 implies next(lamp1Y) != lamp1Y & next(lamp1Y) != 5;
asm alw !onPackage0 | package0Cnt >= 3 implies (next(lamp0X) = lamp0X & next(lamp0Y) = lamp0Y);
asm alw !onPackage1 | package1Cnt >= 3 implies (next(lamp1X) = lamp1X & next(lamp1Y) = lamp1Y);
