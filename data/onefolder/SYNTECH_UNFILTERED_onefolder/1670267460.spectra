import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

gar ini robotX = 0;
gar ini robotY = 0;

// Declaring the targets
env DimX A_X;
env DimY A_Y;
env DimX B_X;
env DimY B_Y;
env DimX C_X;
env DimY C_Y;

// Declaring the obstacles 
env DimX obstacle1X;
env DimY obstacle1Y;

env DimX obstacle2X;
env DimY obstacle2Y;

env DimX obstacle3X;
env DimY obstacle3Y;

env DimX obstacle4X;
env DimY obstacle4Y;

env DimX obstacle5X;
env DimY obstacle5Y;

asm alw obstacle1X = 1;
asm alw obstacle1Y = 1;

asm alw obstacle2X = 2;
asm alw obstacle2Y = 1;

asm alw obstacle3X = 0;
asm alw obstacle3Y = 3;

asm alw obstacle4X = 3;
asm alw obstacle4Y = 3;

asm alw obstacle5X = 3;
asm alw obstacle5Y = 4;

env DimX movingObstcle_X;
env DimY movingObstcle_Y;

asm ini movingObstcle_X = 0;
asm alw movingObstcle_Y = 2;

//Declaring most left and most right
env DimX mostLeftX;
env DimX mostRightX;

asm alw mostLeftX = 0;
asm alw mostRightX = 4;

//Targets should not change location during a run
asm alw (next(A_X) = A_X) & (next(A_Y) = A_Y);
asm alw (next(B_X) = B_X) & (next(B_Y) = B_Y);
asm alw (next(C_X) = C_X) & (next(C_Y) = C_Y);

//possible next steps of the robot
predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
 gar robotMoves:
  always moveDistX(robotX) & moveDistY(robotY);
   
 // Robot reaches the target
define 
	atTarget := (robotX = A_X & robotY = A_Y) | (robotX = B_X & robotY = B_Y) | (robotX = C_X & robotY = C_Y) ;
	atLeftCorner := robotX = 0 & robotY = 0;
	
//req 1
// Always, sometimes in the future, the robot will visit each of the targets
gar alwEv robotX = A_X & robotY = A_Y;
gar alwEv robotX = B_X & robotY = B_Y;
gar alwEv robotX = C_X & robotY = C_Y;


// req 2
//Whenever the robot visits a target, it should eventually also visit the top left corner.
gar P_becomes_true_After_Q(atTarget, atLeftCorner);

// robot should not touch the obstacles
gar alw (robotX != obstacle1X | robotY != obstacle1Y);
gar alw (robotX != obstacle2X | robotY != obstacle2Y);
gar alw (robotX != obstacle3X | robotY != obstacle3Y);
gar alw (robotX != obstacle4X | robotY != obstacle4Y);
gar alw (robotX != obstacle5X | robotY != obstacle5Y);

//possible next steps of the moving obstacle
asm movingObstaclesMoves:
 always moveDistX(movingObstcle_X) & next(movingObstcle_Y) = movingObstcle_Y;

// The sliding abstacle visits both ends of the row infinitely often
asm alwEv movingObstcle_X = mostLeftX & movingObstcle_Y = 2;
asm alwEv movingObstcle_X = mostRightX & movingObstcle_Y = 2;
  
//The robot should guarantee to never be covered by the moving obstacle. 
gar alw (robotX != movingObstcle_X | robotY != movingObstcle_Y);


