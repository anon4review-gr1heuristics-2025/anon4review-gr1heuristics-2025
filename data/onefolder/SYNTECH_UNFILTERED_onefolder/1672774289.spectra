import "./imports/DwyerPatterns.spectra"

spec EscapingGuard

define D := 7;

type Dim = Int(0..D);

sys Dim robotX;
sys Dim robotY;

// obstacles
//define num_static_obstacles := 4;
define staticObstaclesX := 2;
//define staticObstaclesY[num_static_obstacles] := {2,3,4,5};


// Stage 1: robot starting location
gar robotStartLocation:
	ini robotX = 7 and robotY = 0;

// Stage 2: robot moving distance
predicate moveDist(Dim x):
	x - next(x) <= 1 and next(x) - x <= 1;


gar robotLegalMovement:
	alw moveDist(robotX) and moveDist(robotY);

// Stage 3: avoid static obstacles
gar avoidStaticObstacles:
	alw (robotX != staticObstaclesX) or !(robotY in {2,3,4,5});
	

// Stage 4: Reach all targets
define num_targets := 3;
define targetsX[num_targets] := {0,7,0};
define targetsY[num_targets] := {0,7,7};

predicate robotAtTarget(Int(0..(num_targets-1)) i):
	robotX = targetsX[i] and robotY = targetsY[i];

gar reachTarget0:
	alwEv robotAtTarget(0);

gar reachTarget1:
	alwEv robotAtTarget(1);

gar reachTarget2:
	alwEv robotAtTarget(2);
	

// Stage 5: Turn System
counter turn(1..3) {
	turn = 1;
	inc: true;
	reset: false;
	overflow: modulo;
}

predicate fixed(Dim x):
	x = next(x);

gar robotMovesOnTurn:
 alw (turn = 3) implies (fixed(robotX) and fixed(robotY));

// Stage 6: Avoiding Guard

env Dim guardX;
env Dim guardY;

gar robotAvoidGuard:
	alw (robotX < guardX) or (robotX > guardX+1) or (robotY < guardY) or (robotY > guardY+1);

asm guardMovesOnTurn:
	alw (turn != 3) implies (fixed(guardX) and fixed(guardY));

asm guardChasesRobot:
	alw (turn = 3) implies (
	(robotX > guardX+1 implies guardX+1 = next(guardX)) and
	(robotY > guardY+1 implies guardY+1 = next(guardY)) and
	(robotX < guardX implies guardX-1 = next(guardX)) and
	(robotY < guardY implies guardY-1 = next(guardY))
	);

asm guardStartingPoint:
	ini guardX = 0 and guardY = 0;