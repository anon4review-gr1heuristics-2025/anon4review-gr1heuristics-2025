import "./imports/DwyerPatterns.spectra"

spec Deliveries

define DX := 5;
define DY := 5;

type DimX = Int(0..DX);
type DimY = Int(0..DY);
type Coord = Int(0..DY);

sys DimX robotX0;
sys DimY robotY0;
sys DimX robotX1;
sys DimY robotY1;

env DimY elevator;

predicate moveDistX(DimX pos):
	pos+1 = next(pos) or
	pos   = next(pos) or
	pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
	pos+1 = next(pos) or
	pos   = next(pos) or
	pos-1 = next(pos);
	
predicate elevatorMoveDistY(DimY pos):
	pos+1 = next(pos) or
	pos-1 = next(pos);
	
predicate equalLocation(DimX oneX, DimY oneY, DimX twoX, DimY twoY):
	oneX = twoX and oneY = twoY;

//Robots movement module
gar ini robotY0 = DX and robotY1 = DX;

gar robot0MovesOneStepAtATime:
	alw moveDistX(robotX0) and moveDistY(robotY0);

gar robot1MovesOneStepAtATime:
	alw moveDistX(robotX1) and moveDistY(robotY1);
	
gar robot0MovesVerticalyOnlyOnElevator:
	alw robotX0 = 0 -> robotY0 = elevator;
	
gar robot0CantMoveVerticallyWithoutElevator:
	alw robotX0 != 0 -> next(robotY0) = robotY0;
	
gar robot1MovesVerticalyOnlyOnElevator:
	alw robotX1 = 0 -> robotY1 = elevator;
	
gar robot1CantMoveVerticallyWithoutElevator:
	alw robotX1 != 0 -> next(robotY1) = robotY1;
	
gar robotsCannotColide:
	alw !equalLocation(robotX0, robotY0, robotX1, robotY1);
	
asm movingElevaotrOnlyOnY:
	alw moveDistX(elevator);
	
asm alwEv elevator = 0;
asm alwEv elevator = DY;

env DimX lamp0X;
env DimY lamp0Y;
env DimX lamp1X;
env DimY lamp1Y;

asm lampMoveWhenReached:
	alw equalLocation(robotX0, robotY0, lamp0X, lamp0Y) -> lamp0Y != next(lamp0Y);
	
asm lamp1DontMoveUntilReached:
	alw !equalLocation(robotX1, robotY1, lamp1X, lamp1Y) -> lamp1X = next(lamp1X) and lamp1Y = next(lamp1Y);	
	

define onPackage1 := robotX0 = lamp0X and robotY0 = lamp0Y;
	
counter package1Cnt(0..2){
	package1Cnt = 0;
	inc: onPackage1;
}

gar P_becomes_true_between_Q_and_R((robotX0 = DX and robotY0 = DY), package1Cnt = 0, package1Cnt = 2);

gar alwEv equalLocation(robotX0, robotY0, lamp0X, lamp0Y);

gar alwEv equalLocation(robotX1, robotY1, lamp1X, lamp1Y);

asm alw equalLocation(robotX0, robotY0, lamp0X, lamp0Y) -> next(lamp0Y) != lamp0Y;

asm alw equalLocation(robotX1, robotY1, lamp1X, lamp1Y) -> next(lamp1Y) != lamp1Y;

asm alw lamp0X != 0;

asm alw lamp1X != 0;
