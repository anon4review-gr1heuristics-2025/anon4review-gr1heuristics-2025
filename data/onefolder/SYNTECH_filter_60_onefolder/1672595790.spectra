import "./imports/DwyerPatterns.spectra"

spec Deliveries

define
DX := 5;
DY := 5;
elevatorX := 0;
robotsColliding := (robotX0 = robotX1) & (robotY0 = robotY1);
robot0Atdelivery0 := (robotX0 = DeliveryX0) & (robotY0 = DeliveryY0);
robot1Atdelivery1 := (robotX1 = DeliveryX1) & (robotY1 = DeliveryY1);
robot0AtPickUp := (robotX0 = 5) & (robotY0 = 5);
robot1AtPickUp := (robotX1 = 5) & (robotY1 = 5);
robot0AtElevator := (robotX0 = 0) & (robotY0 = elevatorY);
robot1AtElevator := (robotX1 = 0) & (robotY1 = elevatorY);

robot0AtOtherFloor := (robotX0 != 0) & (robotY0 != 5) & !robot0Atdelivery0;
robot1AtOtherFloor := (robotX1 != 0) & (robotY1 != 5) & !robot1Atdelivery1;

robot0BackToGroundAfterOtherFloor := (robotX0 != 0) & (robotY0 = 5) & ONCE(robot0AtOtherFloor);
robot1BackToGroundAfterOtherFloor := (robotX1 != 0) & (robotY1 = 5) & ONCE(robot1AtOtherFloor);

type DimX = Int(0..DX);
type DimY = Int(0..DY);
type Coord = Int(0..DY);

sys DimX robotX0;
sys DimY robotY0;
sys DimX robotX1;
sys DimY robotY1;

env DimY elevatorY;
env DimX DeliveryX0;
env DimY DeliveryY0;
env DimX DeliveryX1;
env DimY DeliveryY1; 

gar ini robotY0 = 5;
gar ini robotY1 = 5;

gar alw !robotsColliding;
gar alw moveHorizontally(robotX0);
gar alw moveHorizontally(robotX1);
gar alw robotX0 = elevatorX -> robotY0 = elevatorY;
gar alw robotX1 = elevatorX -> robotY1 = elevatorY;
gar alw !robot0AtElevator -> robotY0 = next(robotY0);
gar alw !robot1AtElevator -> robotY1 = next(robotY1);
gar alw robot0AtElevator -> next(robotY0) = next(elevatorY);
gar alw robot1AtElevator -> next(robotY1) = next(elevatorY);
gar alw robotY0 = robotY1 -> !(robotX0 = next(robotX1));
gar alw deliveries0  = 3 -> !robot0Atdelivery0;
gar alw deliveries1 = 3 -> !robot1Atdelivery1;

gar alw robot0Atdelivery0 -> ONCE(robot0BackToGroundAfterOtherFloor) & ONCE(robot1BackToGroundAfterOtherFloor);
gar alw robot1Atdelivery1 -> ONCE(robot0BackToGroundAfterOtherFloor) & ONCE(robot1BackToGroundAfterOtherFloor);


gar alwEv robot0Atdelivery0;
gar alwEv robot1Atdelivery1;


asm always moveVertaclly(elevatorY);
asm always DeliveryX0 != 0;
asm always DeliveryX1 != 0;
asm always DeliveryY0 != 5;
asm always DeliveryY1 != 5;
asm alwEv elevatorY = 0;
asm alwEv elevatorY = 5;

asm Delivery0DontMoveUntilRobot0IsThere:
always !robot0Atdelivery0 -> ((DeliveryX0 = next(DeliveryX0)) & (DeliveryY0 = next (DeliveryY0)));

asm Delivery1DontMoveUntilRobot1IsThere:
always !robot1Atdelivery1 -> ((DeliveryX1 = next (DeliveryX1)) & (DeliveryY1 = next (DeliveryY1)));

asm Delivery0MovesWhenRobot0IsThere:
always robot0Atdelivery0 -> !(DeliveryY0 = next(DeliveryY0));

asm Delivery1MovesWhenRobot1IsThere:
always robot1Atdelivery1 -> !(DeliveryY1 = next(DeliveryY1));

counter deliveries0(0..3) {
	deliveries0 = 0;
	inc: robot0Atdelivery0;
	reset: robot0AtPickUp;
	overflow: keep;
}

counter deliveries1(0..3) {
	deliveries1 = 0;
	inc: robot1Atdelivery1;
	reset: robot1AtPickUp;
	overflow: keep;
}

predicate moveHorizontally(DimX pos):
	pos+1 = next (pos) |
	pos = next (pos) |
	pos-1 = next (pos);

predicate moveVertaclly(DimY pos):
	pos+1 = next (pos) |
	pos-1 = next (pos);	
