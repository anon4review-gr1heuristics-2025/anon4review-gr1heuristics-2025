import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;
define num_targets := 3;
define num_static_obstacles := 5;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

env DimX[num_targets] goalsX;
env DimY[num_targets] goalsY;
env DimX movingObstacleX;
env boolean[num_targets] redGoals;

define staticObstaclesX[num_static_obstacles] := {1,3,2,0,3};
define staticObstaclesY[num_static_obstacles] := {1,3,1,3,4};
define movingObstacleY := 2;

predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);

predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);

predicate fixed(DimX x, DimY y):
  x = next(x) & y = next(y);

predicate dontStayDistX(DimX pos):
  pos+1 = next(pos) |
  pos-1 = next(pos);

// robot is at goal i	
predicate robotAtGoal(Int(0..(num_targets-1)) i):
  robotX = goalsX[i] & robotY = goalsY[i];
  
// moving obstacle is at goal i
predicate movingObstacleAtGoal(Int(0..(num_targets-1)) i):
  movingObstacleX = goalsX[i] & movingObstacleY = goalsY[i];

gar robotMoveDist:
  alw moveDistX(robotX) and moveDistY(robotY);

/* Goals assumptions */
asm goalsAreDifferent:
  ini (goalsX[0] != goalsX[1] or goalsY[0] != goalsY[1]) and
      (goalsX[0] != goalsX[2] or goalsY[0] != goalsY[2]) and
      (goalsX[1] != goalsX[2] or goalsY[1] != goalsY[2]);

asm goalsDontMove:
  alw fixed(goalsX[0], goalsY[0]) and
      fixed(goalsX[1], goalsY[1]) and
      fixed(goalsX[2], goalsY[2]);

/* Goals & obstacles assumptions */
asm goalsNotOnObstacles:
  ini (goalsX[0] != staticObstaclesX[0] or goalsY[0] != staticObstaclesY[0]) and
      (goalsX[0] != staticObstaclesX[1] or goalsY[0] != staticObstaclesY[1]) and
      (goalsX[0] != staticObstaclesX[2] or goalsY[0] != staticObstaclesY[2]) and
      (goalsX[0] != staticObstaclesX[3] or goalsY[0] != staticObstaclesY[3]) and
      (goalsX[0] != staticObstaclesX[4] or goalsY[0] != staticObstaclesY[4]) and
      (goalsX[1] != staticObstaclesX[0] or goalsY[1] != staticObstaclesY[0]) and
      (goalsX[1] != staticObstaclesX[1] or goalsY[1] != staticObstaclesY[1]) and
      (goalsX[1] != staticObstaclesX[2] or goalsY[1] != staticObstaclesY[2]) and
      (goalsX[1] != staticObstaclesX[3] or goalsY[1] != staticObstaclesY[3]) and
      (goalsX[1] != staticObstaclesX[4] or goalsY[1] != staticObstaclesY[4]) and
      (goalsX[2] != staticObstaclesX[0] or goalsY[2] != staticObstaclesY[0]) and
      (goalsX[2] != staticObstaclesX[1] or goalsY[2] != staticObstaclesY[1]) and
      (goalsX[2] != staticObstaclesX[2] or goalsY[2] != staticObstaclesY[2]) and
      (goalsX[2] != staticObstaclesX[3] or goalsY[2] != staticObstaclesY[3]) and
      (goalsX[2] != staticObstaclesX[4] or goalsY[2] != staticObstaclesY[4]);

asm firstGoalIsReachable:
  alwEv !redGoals[0] and !movingObstacleAtGoal(0);
asm secondGoalIsReachable:
  alwEv !redGoals[1] and !movingObstacleAtGoal(1);
asm thirdGoalIsReachable:
  alwEv !redGoals[2] and !movingObstacleAtGoal(2); 

asm goalsNotRedWhileRobotOnIt:
  alw (robotAtGoal(0) implies !next(redGoals[0])) and
      (robotAtGoal(1) implies !next(redGoals[1])) and
      (robotAtGoal(2) implies !next(redGoals[2]));

/* Obstacles only assumptions */
asm alwEv dontStayDistX(movingObstacleX);

asm movingObstacleRespectRobot:
  alw !(next(movingObstacleX) = robotX and next(movingObstacleY) = robotY);

gar visitFirstGoalInifintelyOften:
 alwEv robotAtGoal(0);
gar visitSecondGoalInifintely:
 alwEv robotAtGoal(1);
gar visitThirdGoalInifintely:
 alwEv robotAtGoal(2);

gar avoidStaticObstacles:
  alw (robotX != staticObstaclesX[0] or robotY != staticObstaclesY[0]) and
      (robotX != staticObstaclesX[1] or robotY != staticObstaclesY[1]) and
      (robotX != staticObstaclesX[2] or robotY != staticObstaclesY[2]) and
      (robotX != staticObstaclesX[3] or robotY != staticObstaclesY[3]) and
      (robotX != staticObstaclesX[4] or robotY != staticObstaclesY[4]);

gar avoidMovingObstacle:
  alw (robotX != movingObstacleX or robotY != movingObstacleY);

gar dontMoveThroughMovingObstacle:	
 alw (robotY = movingObstacleY and next(robotY) = robotY and robotX = next(movingObstacleX))
     implies next(robotX) != movingObstacleX;

gar avoidRedGoals:
  alw (redGoals[0] implies !robotAtGoal(0)) and
      (redGoals[1] implies !robotAtGoal(1)) and
      (redGoals[2] implies !robotAtGoal(2));


// asm alw moveDistX(movingObstacleX); //required only when adding the blocked goals mechanism.


// relates to the special case in which the three goals are in the corner and the robot is surrounded by them.
//asm goalNotRedWhileRobotOnIt {Int(0..(num_targets-1)) i}:
//	alw atGoal(i) implies next(!redGoals[i]); 


///asm goalsNotInSamePlace {Int(0..(num_targets-1)) i}:
///   ini forall j in Int(0..(num_targets-1)).
///     (i < j) implies !(goalsX[i] = goalsX[j] & goalsY[i] = goalsY[j]); 
/*equal ^_ */
//asm goal01NotInSamePlace:
//	alw !(goalsX[0] = goalsX[1] & goalsY[0] = goalsY[1]);
//asm goal02NotInSamePlace:
//	alw !(goalsX[0] = goalsX[2] & goalsY[0] = goalsY[2]);
//asm goal12NotInSamePlace:
//	alw !(goalsX[1] = goalsX[2] & goalsY[1] = goalsY[2]);

/* all commented till here should undo */

/*
 * Blocked (red) goals guarantee:
 */

// edge case: if the goal is in (4,3) then it can stay red until the moving obs drives the robot away
//asm goalNotIn_4_3 {Int(0..(num_targets-1)) i}:
//	ini !(goalsX[i] = 4 and goalsY[i] = 3);

// edge case to analyze and understand (doesnt work for avoiding red goals
//asm ini goalsX[0] = 4 and goalsX[1] = 3 and goalsX[2] = 3 and goalsY[0] = 1 and goalsY[1] = 2 and goalsY[2] = 1;

// edge case: if the goals block the bottom left part of the field then they can stay red until the moving obs drives the robot away
//asm goalsNotBlockingBottomLeft {Int(0..(num_targets-1)) i}:
//	ini forall j in Int(0..(num_targets-1)). 
//		!(goalsX[i] = 1 and goalsX[j] = 2 and goalsY[i] = 3 and goalsY[i] = 3);
		
		

		
		
		
		
		