import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

/* All the targets locations. */
env DimX targetAX;
env DimY targetAY;
env DimX targetBX;
env DimY targetBY;
env DimX targetCX;
env DimY targetCY;


/* The targets should stay at their place. */
predicate stay(DimX posX, DimY posY):
  posX = next(posX) and posY = next(posY);

/* The targets should stay at their places for all the run. */
asm alw stay(targetAX, targetAY);  
asm alw stay(targetBX, targetBY);  
asm alw stay(targetCX, targetCY);  
 
define atTopLeftCorner := robotX = 0 and robotY = 0;
	atA := robotX = targetAX and robotY = targetAY;
	atB := robotX = targetBX and robotY = targetBY;
	atC := robotX = targetCX and robotY = targetCY;

/* env variables for all the targets is blocked status. */
env boolean isABlocked;
env boolean isBBlocked;
env boolean isCBlocked;


/* change late to no neigberhood */
predicate differentPlaces(DimX tar1X, DimY tar1Y, DimX tar2X, DimY tar2Y):
	tar1X = tar2X -> ((tar1Y != tar2Y) and (tar1Y != tar2Y +1) and (tar1Y != tar2Y -1)); 
//
asm alw differentPlaces(targetAX, targetAY, targetBX, targetBY);
asm alw differentPlaces(targetAX, targetAY, targetCX, targetCY);
asm alw differentPlaces(targetCX, targetCY, targetBX, targetBY);

/* The robot start at the top left corner. */
gar ini atTopLeftCorner;

/* The robot goes on each target for infinity times. */
gar alwEv atA;
gar alwEv atB;
gar alwEv atC;
gar alwEv atTopLeftCorner;

/* The robot can move one step in each time */
predicate moveDist(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
gar robotAlwaysMove: always (moveDist(robotX) & moveDist(robotY));

/* the robot can't visit a target if it's blocked */
gar alw isABlocked -> !atA;
gar alw isBBlocked -> !atB;
gar alw isCBlocked -> !atC;

/* the targets are alwEv not blocked by env and not blocked by the MObstacle so the robot can go over it. */
asm alwEv !isABlocked and targetAX != MObstacleX;
asm alwEv !isBBlocked and targetBX != MObstacleX;
asm alwEv !isCBlocked and targetCX != MObstacleX;

/*  The robot starts at point grid[0][0]. We want to make sure that if one of target is located at that point 
 than the target is not blocked.  */
asm ini targetAX = 0 and targetAY = 0 -> !isABlocked; 
asm ini targetBX = 0 and targetBY = 0 -> !isBBlocked;
asm ini targetCX = 0 and targetCY = 0 -> !isCBlocked;

/* The obstacles are fixed and known in advance for every run, so they are
 not set as env variables. Those function purposes ate to make sure that the
 robot and the targets won't go over the obstacles. 
 */
predicate notOnObstacles(DimX targetX, DimY targetY):
	(targetX = 1 -> targetY != 1) and (targetX = 3 -> targetY != 3)  and (targetX = 2 -> targetY != 1) and (targetX = 0 -> targetY != 3) and (targetX = 3 -> targetY != 4) and (targetX = 4 -> targetY != 0) and (targetX= 3 -> targetY != 2);

predicate RobotnotOnObstacles(DimX targetX, DimY targetY):
	(targetX = 1 -> targetY != 1) and (targetX = 3 -> targetY != 3)  and (targetX = 2 -> targetY != 1) and (targetX = 0 -> targetY != 3) and (targetX = 3 -> targetY != 4);

asm alw notOnObstacles(targetAX, targetAY);
asm alw notOnObstacles(targetBX, targetBY);
asm alw notOnObstacles(targetCX, targetCY); 

gar alw RobotnotOnObstacles(robotX, robotY);

/* env variables for the moving obstacle. The Y axis of it is constant. */
env DimX MObstacleX;
define MObstacleY := 2;

/* The moving obstacle visits both side infinitely often */
asm S_responds_to_P_globally(MObstacleX = 0, MObstacleX = 4);
asm S_responds_to_P_globally(MObstacleX = 4, MObstacleX = 0);
asm ini MObstacleX = 0;

asm alw moveDist(MObstacleX);
gar alw robotY = MObstacleY -> robotX != MObstacleX;

/* The robot can't stay on target for more the one turn.
 We understood that there is a problem that the bad robot can stay on a target and not allow the good robot to collect it. 
 */
asm alw (MObstacleX = targetCX and MObstacleY = targetCY) -> next(MObstacleX) != MObstacleX;
asm alw (MObstacleX = targetBX and MObstacleY = targetBY) -> next(MObstacleX) != MObstacleX;
asm alw (MObstacleX = targetAX and MObstacleY = targetAY) -> next(MObstacleX) != MObstacleX;

define atChargingPlace := robotX = 4 and robotY = 0;
gar alwEv atChargingPlace;

gar trig [true]*[atChargingPlace] |=> [atChargingPlace]{3,};






