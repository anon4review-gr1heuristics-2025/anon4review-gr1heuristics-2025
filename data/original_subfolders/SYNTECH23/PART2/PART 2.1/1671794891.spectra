import "./imports/DwyerPatterns.spectra"

spec EscapingGuard
/* This specification responsible for the robot and the moving obstacle movement. */
define D := 7;

type Dim = Int(0..D);

sys Dim robotX;
sys Dim robotY;

/* We will define the robot location as the top left square of it. */
env Dim obsXL;
env Dim obsYT;

/* ---------------robot movement--------------- */
predicate moveDist(Dim pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
gar robotAlwaysMove: alw (moveDist(robotX) & moveDist(robotY));
gar ini robotX = 7 and robotY = 0;
/* ---------------obstacle movement--------------- */
asm ini obsXL = 4 and obsYT = 1;

asm obsAlwaysMove: alw (moveDist(obsXL) & moveDist(obsYT));
predicate obsRespondsToRob(Dim robotX, Dim robotY, Dim obsXL, Dim obsYT):
	(robotX < obsXL -> (next(obsXL) <= obsXL)) and 
	(robotX > obsXL -> (next(obsXL) >= obsXL)) and
	(robotY < obsYT -> (next(obsYT) <= obsYT)) and
	(robotY > obsYT -> (next(obsYT) >= obsYT));

// asm alw obsRespondsToRob(robotX, robotY, obsXL, obsYT);

counter count(1..3) {
	count = 1;
	inc: count < 4;
	overflow: modulo;
}

asm obsMovesSlower: alw (count < 3) -> (next(obsXL) = obsXL) and (next(obsYT) = obsYT);

/* ---------------No collision--------------- */
predicate noCollision(Dim robotX, Dim robotY, Dim obsXL, Dim obsYT):
	(robotX = obsXL or robotX = obsXL+1) -> (robotY != obsYT and robotY != obsYT+1) and
	(robotY = obsYT or robotY = obsYT+1) -> (robotX != obsXL and robotX != obsXL+1);

gar alw noCollision(robotX, robotY, obsXL, obsYT);
	

