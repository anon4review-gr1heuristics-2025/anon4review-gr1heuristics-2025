import "./imports/DwyerPatterns.spectra"


spec Deliveries

define DX := 5;
define DY := 5;

type DimX = Int(0..DX);
type DimY = Int(0..DY);
type Coord = Int(0..DY);

sys DimX robotX0;
sys DimY robotY0;
sys DimX robotX1;
sys DimY robotY1;

//Module 1

predicate stayX(DimX x):
    x = next(x);

predicate stayY(DimY y):
    y = next(y);


gar alw robotX0 - 1 <= next(robotX0) &  next(robotX0) <= robotX0 + 1;
gar alw robotX1 - 1 <= next(robotX1) &  next(robotX1) <= robotX1 + 1;

gar ini robotY0 = DY;
gar ini robotY1 = DY;

gar alw robotY0 = robotY1 -> next(robotX0) != robotX1 | next(robotX1) != robotX0; //To prevent robots switching places
gar alw robotY0 != robotY1 | robotX0 != robotX1;  //to prevent collisions

gar alw robotX0 != 0 -> stayY(robotY0);
gar alw robotX1 != 0 -> stayY(robotY1);

gar alw stayX(robotX0) | stayY(robotY0);
gar alw stayX(robotX1) | stayY(robotY1);

//Module 2

//env DimY elevator;
//
//asm alw elevator - 1 <= next(elevator) &  next(elevator) <= elevator + 1;
//
//asm alwEv elevator = 0;
//asm alwEv elevator = DY;
//
//
//gar alw robotX0 = 0 -> robotY0 = elevator;
//gar alw robotX1 = 0 -> robotY1 = elevator;
// 
 
//Module 3

env DimX targetX0;
env DimY targetY0;
env DimX targetX1;
env DimY targetY1;

asm alw targetX0 != 0 & targetX1 != 0 &
		targetY0 != DY & targetY1 != DY;

define atTarget0 :=
	robotX0 = targetX0 & robotY0 = targetY0;

define atTarget1 :=
	robotX1 = targetX1 & robotY1 = targetY1;
	
gar alwEv atTarget0;
gar alwEv atTarget1;

asm alw atTarget0 -> next(targetY0) != targetY0;
asm alw atTarget1 -> next(targetY1) != targetY1;

counter packages0(0..3) {
	packages0 = 0;
	inc: atTarget0;
	reset: robotY0 = DY;
	overflow: keep;
}

gar alw packages0 = 3 -> !atTarget0; 

counter packages1(0..3) {
	packages1 = 0;
	inc: atTarget1;
	reset: robotY1 = DY;
	overflow: keep;
}

gar alw packages1 = 3 -> !atTarget1;