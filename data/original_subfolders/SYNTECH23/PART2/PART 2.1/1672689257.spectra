import "./imports/DwyerPatterns.spectra"

spec EscapingGuard

define D := 7;

type Dim = Int(0..D);

sys Dim robotX;
sys Dim robotY;

//module 1 - robot gets to all targets in the correct order

define atTarget1 := robotX = 0 & robotY = 0;
define atTarget2 := robotX = D & robotY = D;
define atTarget3 := robotX = 0 & robotY = D;

gar getToTarget1:
	alwEv atTarget1;

gar getToTarget3:
	alwEv atTarget3;
	
//guarantee robot gets to targets in correct order
gar robotVisitsTarget2Between1And3:
	P_becomes_true_between_Q_and_R(atTarget2, atTarget1, atTarget3);
	
//guarantee robot starts in top right corner
gar robotStartsInTopRight:
	ini robotX = D & robotY = 0;
	
	
//module 2 - robot two steps out of three

predicate moveDist(Dim pos):
	pos+1= next(pos) | pos= next(pos) | pos-1= next(pos);
	
predicate staysInPlace(Dim posx, Dim posy):
	posx = next(posx) & posy = next(posy);
	
monitor Int(0..2) turnNum {
	ini turnNum = 0;
	alw ((turnNum = 0 -> next(turnNum) = 1) 
		& (turnNum = 1 -> next(turnNum) = 2)
		& (turnNum = 2 -> next(turnNum) = 0));
}

gar robotMovesTwoTurnsOutOfThree:
	alw (((turnNum = 2) -> staysInPlace(robotX, robotY))
		& moveDist(robotX) & moveDist(robotY));

//module 3 - robot never touches fixed obstacles

gar robotDoesntTouchFixedObstacles:
	alw (robotX != 2 | robotY != 2)
	& (robotX != 2 | robotY != 3)
	& (robotX != 2 | robotY != 4)
	& (robotX != 2 | robotY != 5);
	
	
//module 4 - robot never touches guard, assumptions for guard movement

env Dim guardX; 
env Dim guardY; //these will hold the coordinates for the top left corner of the guard

gar robotDoesntTouchGuard:
	alw (robotX != guardX | robotY != guardY)
	& (robotX != guardX+1 | robotY != guardY)
	& (robotX != guardX | robotY != guardY+1)
	& (robotX != guardX+1 | robotY != guardY+1);

asm guardMovesOneTurnOutOfThree:
	alw ((turnNum = 0 | turnNum = 1) -> staysInPlace(guardX, guardY)
	& moveDist(guardX) & moveDist(guardY));
	
asm guardMovesInDirectionOfRobot:
	alw ((turnNum = 2 & (robotX > guardX + 1)) -> next(guardX) = guardX + 1)
	& ((turnNum = 2 & (robotY > guardY + 1)) -> next(guardY) = guardY + 1)
	& ((turnNum = 2 & (robotX < guardX)) -> next(guardX) = guardX - 1)
	& ((turnNum = 2 & (robotY < guardY)) -> next(guardY) = guardY - 1);
	
asm guardStartsAtTopLeft:
	ini guardX = 0 & guardY = 0;
		
		
		
		
		