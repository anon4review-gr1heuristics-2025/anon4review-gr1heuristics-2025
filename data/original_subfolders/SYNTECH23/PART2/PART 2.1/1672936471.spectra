import "./imports/DwyerPatterns.spectra"

spec CatchingIntruder
define D := 7;
type Dim = Int(0..D);

sys Dim robotX0;
sys Dim robotY0;
sys Dim robotX1;
sys Dim robotY1;

/* --------------- step 1 ---------------  
 Focusing: The robots movement */
/* Initially, the two robots R0 and R1 are located at the top left and right corners respectively.*/
gar atTopLeft: ini robotX0 = 0 and robotY0 = 0;
gar atTopRight: ini robotX1 = 7 and robotY1 = 0;

/*robot's movement both robots can stay in place or move to an empty adjacent cell, but they never move diagonally.  */
predicate moveDist(Dim posX, Dim posY):
  (posX+1 = next(posX) and posY = next(posY))|
  (posX = next(posX) and posY+1 = next(posY)) |
  (posX-1 = next(posX) and posY = next(posY))|
  (posX = next(posX) and posY-1 = next(posY)) |
  (posX = next(posX) and posY = next(posY));
gar alw moveDist(robotX0, robotY0);
gar alw moveDist(robotX1, robotY1);

/* --------------- step 2 --------------- 
Focusing: Avoiding static obstacles and no collision between the robots. */
/* robot doesn't hit static obstacles */
predicate robotNotOnStaticObstacles(Dim robX, Dim robY):
	robY = 1 -> (robX != 2 and robX != 3 and robX != 4 and robX != 5);
gar alw robotNotOnStaticObstacles(robotX0, robotY0);
gar alw robotNotOnStaticObstacles(robotX1, robotY1);

predicate noCollision(Dim X0, Dim Y0, Dim X1, Dim Y1):
	X0 = X1 -> Y0 != Y1;	
gar alw noCollision(robotX0, robotY0, robotX1, robotY1);

/* --------------- step 3 --------------- 
 Focusing: Intruder movement. 
 A moving intruder (D) enters the grid from a random cell at the bottom row.
 In each state, the intruder may stay in place or move to an empty adjacent cell,
  but it never moves diagonally
 */
// env Dim intruderX;
// env Dim intruderY;
// asm ini intruderY = 7;
// asm alw moveDist(intruderX, intruderY);

