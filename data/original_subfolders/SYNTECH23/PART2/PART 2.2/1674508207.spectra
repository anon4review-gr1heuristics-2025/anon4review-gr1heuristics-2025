import "./imports/DwyerPatterns.spectra"

spec CatchingIntruder
define D := 7;
type Dim = Int(0..D);

sys Dim robotX0;
sys Dim robotY0;
sys Dim robotX1;
sys Dim robotY1;


env Dim intruderX;
env Dim intruderY;

//module 3 intruder's failure attempts


predicate moveDist(Dim pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);


predicate stay(Dim dim):
	next(dim) = dim;

//intruder and robots do not collide
asm alw !(intruderX = robotX0 and intruderY = robotY0);
asm alw !(intruderX = robotX1 and intruderY = robotY1);

predicate cellIsClear(Dim x, Dim y):
	!((robotX1) = x and (robotY1) = y)  and  !((robotX0) = x and (robotY0) = y) and !(x = 2 and y = 1) and !(x = 4 and y = 1)  and !(x = 3 and y = 1) and !(x = 5 and y = 1);
	
predicate robotPosition(Dim x, Dim y):
 (robotX0 = x and robotY0 = y) or (robotX1 = x and robotY1 = y);
 
define
	intruderCantMove := (intruderX = 7 and intruderY = 7) and robotPosition(6, 7) and robotPosition(7, 6)
						or (intruderX = 0 and intruderY = 7) and robotPosition(0, 6) and robotPosition(1, 7)
						or (intruderX = 7 and intruderY = 0) and robotPosition(6, 0) and robotPosition(7, 1)
						or (intruderX = 0 and intruderY = 0) and robotPosition(1, 0) and robotPosition(0, 1)
						or intruderX >= 2 and intruderX <= 5 and intruderY = 1 and
							robotPosition(intruderX - 1, intruderY) and robotPosition(intruderX + 1, intruderY);
	
	
asm intruderMoves:
	alw ((intruderY < 7 and cellIsClear(intruderX, intruderY + 1))
		or (intruderY > 0 and cellIsClear(intruderX, intruderY - 1))
		or (intruderX < 7 and cellIsClear(intruderX + 1, intruderY))
		or (intruderX > 0 and cellIsClear(intruderX - 1, intruderY))
		and !(intruderCantMove));
		
asm alw intruderCantMove -> stay(intruderX) and stay(intruderY);

gar alw intruderCantMove -> stay(robotX0) & stay(robotY0) & stay(robotX1) & stay(robotY1);

//intruder movement logic
asm alw robotPosition(intruderX, intruderY + 1) -> next(intruderY) <= intruderY;
asm alw robotPosition(intruderX + 1, intruderY) -> next(intruderX) <= intruderX;
asm alw robotPosition(intruderX, intruderY - 1) -> next(intruderY) >= intruderY;
asm alw robotPosition(intruderX - 1, intruderY) -> next(intruderX) >= intruderX;




