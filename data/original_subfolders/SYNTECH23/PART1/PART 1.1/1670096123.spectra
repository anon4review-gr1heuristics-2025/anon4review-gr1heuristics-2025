import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;
define num_targets := 3;
define num_static_obstacles := 5;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

env DimX[num_targets] goalsX;
env DimY[num_targets] goalsY;

env DimX[num_static_obstacles] staticObstaclesX;
env DimY[num_static_obstacles] staticObstaclesY;

predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);

predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);

predicate fixed(DimX x, DimY y):
  x = next(x) & y = next(y);
	
predicate inPlace(DimX x1, DimX x2, DimY y1, DimY y2):
  x1 = x2 & y1 = y2;

gar robotMoveDist:
  alw moveDistX(robotX) and moveDistY(robotY);

asm goalsDontMove {Int(0..(num_targets-1)) i}:
  alw fixed(goalsX[i], goalsY[i]);

gar visitGoalsInifintely {Int(0..(num_targets-1)) i}:
  alwEv inPlace(robotX, goalsX[i], robotY, goalsY[i]);

asm staticObstaclesDontMove:
  alw staticObstaclesX[0] = 1 and staticObstaclesY[0] = 1 and
      staticObstaclesX[1] = 3 and staticObstaclesY[1] = 3 and
      staticObstaclesX[2] = 2 and staticObstaclesY[2] = 1 and
      staticObstaclesX[3] = 0 and staticObstaclesY[3] = 3 and
      staticObstaclesX[4] = 3 and staticObstaclesY[4] = 4;
  
gar avoidStaticObstacles {Int(0..(num_static_obstacles-1)) i}:
  alw !inPlace(robotX, staticObstaclesX[i], robotY, staticObstaclesY[i]); 
  