// Meirav Ben Josef 208433631
// Alon Levy 208541821

import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

// Part 1: Initializing all entities

sys DimX robotX;
sys DimY robotY;

gar ini robotX = 0;
gar ini robotY = 0;

// Declaring obstacles that are fixed in place
define obstacle1X := 0;
define obstacle1Y := 3;

define obstacle2X := 1;
define obstacle2Y := 1;

define obstacle3X := 2;
define obstacle3Y := 1;

define obstacle4X := 3;
define obstacle4Y := 3;

define obstacle5X := 3;
define obstacle5Y := 4;

// Declaring targets
// Making sure targets are not created on obstacles
env DimX targetAX;
env DimY targetAY;
asm alw !(targetAX = 0 & targetAY = 0) & !(targetAX = 0 & targetAY = 3) & !(targetAX = 1 & targetAY = 1) & !(targetAX = 2 & targetAY = 1) &
!(targetAX = 3 & targetAY = 3) & !(targetAX = 3 & targetAY = 4);

env DimX targetBX;
env DimY targetBY;
asm alw !(targetBX = 0 & targetBY = 0) & !(targetBX = 0 & targetBY = 3) & !(targetBX = 1 & targetBY = 1) & !(targetBX = 2 & targetBY = 1) &
!(targetBX = 3 & targetBY = 3) & !(targetBX = 3 & targetBY = 4);

env DimX targetCX;
env DimY targetCY;
asm alw !(targetCX = 0 & targetCY = 0) & !(targetCX = 0 & targetCY = 3) & !(targetCX = 1 & targetCY = 1) & !(targetCX = 2 & targetCY = 1) &
!(targetCX = 3 & targetCY = 3) & !(targetCX = 3 & targetCY = 4);

// Fix targets' location 
asm alw (next(targetAX) = targetAX & next(targetAY) = targetAY) & (next(targetBX) = targetBX & next(targetBY) = targetBY) &
(next(targetCX) = targetCX & next(targetCY) = targetCY);

// Declaring and fixing charger in place
define chargeX := 4;
define chargeY := 0;

// Declaring moving obstacles
env DimX mX;
define mY := 2;
asm ini mX = 0;

predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
// Robot moves one step max at a time
 gar robotMoves:
  always moveDistX(robotX) & moveDistY(robotY);

// Moving obstacle moves only in x axis
 asm always moveDistX(mX);
  
// robot doesn't step on obstacles
gar alw !(robotX = mX & robotY = 2) & !(robotX = obstacle1X & robotY = obstacle1Y) & !(robotX = obstacle2X & robotY = obstacle2Y) &
	!(robotX = obstacle3X & robotY = obstacle3Y) & !(robotX = obstacle4X & robotY = obstacle4Y) & !(robotX = obstacle5X & robotY = obstacle5Y);

// Moving obstacle visits both ends of the row infinitely often
asm alwEv mX = 0;
asm alwEv mX = 4;

// Always, sometimes in the future, the robot will visit each of the targets.
gar alwEv (robotX = targetAX & robotY = targetAY);
gar alwEv (robotX = targetBX & robotY = targetBY);
gar alwEv (robotX = targetCX & robotY = targetCY);

// After reaching a target the robot goes back to 0,0
gar P_becomes_true_After_Q(((robotX = targetAX & robotY = targetAY) |
(robotX = targetBX & robotY = targetBY) | (robotX = targetCX & robotY = targetCY)), (robotX = 0 & robotY = 0));

env boolean ABlocked;
env boolean BBlocked;
env boolean CBlocked;

asm alwEv ABlocked != true;
asm alwEv BBlocked != true;
asm alwEv CBlocked != true;
//
//asm ini ABlocked = false;
//asm ini BBlocked = false;
//asm ini CBlocked = false;

// Robot doesn't stand on blocked target
//gar alw ABlocked = true implies (robotX != targetAX | robotY != targetAY);
//gar alw BBlocked = true implies (robotX != targetBX | robotY != targetBY);
//gar alw CBlocked = true implies (robotX != targetCX | robotY != targetCY);

//asm alw (robotX = targetAX & robotY = targetAY) implies ABlocked = false;
//asm alw (robotX = targetBX & robotY = targetBY) implies BBlocked = false;
//asm alw (robotX = targetCX & robotY = targetCY) implies CBlocked = false;

// When robot lose power go to recharge for 4 times
env boolean lostPower;
gar P_becomes_true_After_Q(lostPower = true, (robotX = 4 & robotY = 0));
asm alwEv lostPower != true;

counter chargingCounter(0..4){
	chargingCounter = 0;
	reset: !(robotX = 4 & robotY = 0);
	inc: (robotX = 4 & robotY = 0 & lostPower = true);
	overflow: false;
}

gar alw (lostPower = true & (robotX = 4 & robotY = 0) & chargingCounter < 4) implies (next(robotX) = 4 & next(robotY) = 0);

asm chargingCounter = 4 implies lostPower = false;
asm lostPower = true & chargingCounter < 4 implies lostPower = true;
