import "./imports/DwyerPatterns.spectra"

/**
 * module that describes obstacles behavior.
 */
 
spec PatrollingTeam8Module1


define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

define D := 4;

/**
 * creating obstacles
 */
type Dim = Int(0..D);
env Dim[2] fixedObstacle1;
env Dim[2] fixedObstacle2;
env Dim[2] fixedObstacle3;
env Dim[2] fixedObstacle4;
env Dim[2] fixedObstacle5;
env Dim[2] movingObstacle;


/**
 * fixed obstacle does not move
 */
asm alw (fixedObstacle1[0]=1) & (fixedObstacle1[1] = 1);
asm alw (fixedObstacle2[0]=2) & (fixedObstacle2[1] = 1);
asm alw (fixedObstacle3[0]=0) & (fixedObstacle3[1] = 3);
asm alw (fixedObstacle4[0]=3) & (fixedObstacle4[1] = 3);
asm alw (fixedObstacle5[0]=3) & (fixedObstacle5[1] = 4);

/**
 * moving obstacle starts at fixed location
 */
asm alw (movingObstacle[1] = 2);
 
/**
 * obstacle can move only on X-axis
 */
predicate moveDist(Dim pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos); 
 
asm obstacleMoves: always moveDist(movingObstacle[0]); 

/**
 * obstacle can not stay on target square forever , and should visit both ends of the row
infinitely often
 */
asm alwEv movingObstacle[0] = 0;
asm alwEv movingObstacle[0] = 4;

/**
 * robot never crashes into the obstacles
 */

predicate notOnObstacle(DimX rX, DimX rY, Dim oX, Dim oY):
	(rX != oX) |
	(rY != oY) 
	;

gar alw notOnObstacle(robotX, robotY, movingObstacle[0], movingObstacle[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle1[0], fixedObstacle1[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle2[0], fixedObstacle2[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle3[0], fixedObstacle3[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle4[0], fixedObstacle4[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle5[0], fixedObstacle5[1]);

 /**
  * robot can move one square at a time
  */
  
gar robotMoves: always moveDist(robotX) & moveDist(robotY);  
 
 
 
 
 
 
 
 
 
 
 
 
 
 