import "./imports/DwyerPatterns.spectra"

/**
 * module that describes robot's moving towards the targets.
 */
spec PatrollingTeam8Module2

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

//TODO: complete the specification
 
 
 define D := 4;

/**
 * creating obstacles
 */
type Dim = Int(0..D);
env Dim[2] target1;
env Dim[2] target2;
env Dim[2] target3;


/**
 * targets can not be on fixed obstacles
 */
predicate notOnObstacle(Dim posX, Dim posY):
	! (posX=1 & posY=1) &
	! (posX=2 & posY=1) &
	! (posX=0 & posY=3) &
	! (posX=3 & posY=3) &
	! (posX=3 & posY=4) ;
	
asm ini notOnObstacle(target1[0], target1[1]);
asm ini notOnObstacle(target2[0], target2[1]);
asm ini notOnObstacle(target3[0], target3[1]);


/**
 * targets don't move forever
 */ 
asm alw (target1[0]=next(target1[0])) & (target1[1]=next(target1[1]));
asm alw (target2[0]=next(target2[0])) & (target2[1]=next(target2[1]));
asm alw (target3[0]=next(target3[0])) & (target3[1]=next(target3[1]));
 
 
 /**
  * robot starts at the top left corner
  */
 
gar ini robotX=0 & robotY=0; 
 
/**
  * robot always eventually reaches targets
  */
gar alwEv robotX=target1[0] & robotY=target1[1];
gar alwEv robotX=target2[0] & robotY=target2[1];
gar alwEv robotX=target3[0] & robotY=target3[1];
 

/**
 * guarantee for section 2 in the instructions paper- robot has to go back to the top left corner after he visits the targets
 */
gar alwEv robotX=0 & robotY=0;



 
 
 