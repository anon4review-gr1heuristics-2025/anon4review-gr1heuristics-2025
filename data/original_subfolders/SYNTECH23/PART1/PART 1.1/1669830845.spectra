import "./imports/DwyerPatterns.spectra"

spec Patrolling

type Dim = Int(0..4);

sys Dim[2] robot;
env Dim[3][2] goals;

define 
robotInStartingPoint:= robot[0] = 0 & robot[1] = 0;
robotAtGoalA:= robot[0] = goals[0][0] & robot[1] = goals[0][1];
robotAtGoalB:= robot[0] = goals[1][0] & robot[1] = goals[1][1];
robotAtGoalC:= robot[0] = goals[2][0] & robot[1] = goals[2][1];
robotAtGoal := robotAtGoalA | robotAtGoalB | robotAtGoalC;

gar alwEv robotAtGoalA;
gar alwEv robotAtGoalB;
//gar alwEv robotAtGoalC;


//asm goalANotMoving:
//(goals[0][0] = next(goals[0][0])) & (goals[0][1] = next(goals[0][1])); 
//
//asm goalBNotMoving:
//(goals[1][0] = next(goals[1][0])) & (goals[1][1] = next(goals[1][1])); 
//
//asm goalCNotMoving:
//(goals[2][0] = next(goals[2][0])) & (goals[2][1] = next(goals[2][1])); 

//asm goalNotMoving2(goals[0]);
//asm goalNotMoving2(goals[1]);
//asm goalNotMoving2(goals[2]);
//
//predicate goalNotMoving2(Dim[2] pos):
//pos[0] = next(pos[0]) & pos[1] = next(pos[1]); 

gar robotMoves:
always moveDist(robot[0]) & moveDist(robot[1]);

gar visitStartPointAfterGoalA:
S_responds_to_P_globally(robotInStartingPoint, robotAtGoal);

predicate moveDist(Dim pos):
  pos+1 = next (pos) |
pos = next (pos) |
pos-1 = next (pos) ;   