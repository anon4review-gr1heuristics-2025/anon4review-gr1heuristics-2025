import "./imports/DwyerPatterns.spectra"

spec Patrolling

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

//TODO: complete the specification
define
	charging := 		robotX = 4 and robotY = 0;
	robotAtStart := 	robotX = 0 and  robotY = 0;
//	robotOnTarget :=   	equalLocation(robotX, robotY, target1X, target1Y)
//					or 	equalLocation(robotX, robotY, target2X, target2Y)
//					or 	equalLocation(robotX, robotY, target3X, target3Y);
			
					

 gar ini robotAtStart;					
//Object Declaration

//Targets
env DimX target1X;
env DimY target1Y;
env DimX target2X;
env DimY target2Y;
env DimX target3X;
env DimY target3Y;

////The target locations are not on the obstacles
asm alw !(target1X = 0 and target1Y = 0) and !(target1X = 0 and target1Y = 3) and !(target1X = 1 and target1Y = 1) and !(target1X = 2 and target1Y = 1) and
!(target1X = 3 and target1Y = 3) and !(target1X = 3 and target1Y = 4);
asm alw !(target2X = 0 and target2Y = 0) and !(target2X = 0 and target2Y = 3) and !(target2X = 1 and target2Y = 1) and !(target2X = 2 and target2Y = 1) and
!(target2X = 3 and target2Y = 3) and !(target2X = 3 and target2Y = 4);
asm alw !(target3X = 0 and target3Y = 0) and !(target3X = 0 and target3Y = 3) and !(target3X = 1 and target3Y = 1) and !(target3X = 2 and target3Y = 1) and
!(target3X = 3 and target3Y = 3) and !(target3X = 3 and target3Y = 4);


predicate notOnObstacles(DimX targetX, DimY targetY):
	!(targetX = 0 and targetY = 0) and !(targetX = 0 and targetY = 3) and !(targetX = 1 and targetY = 1)
	and !(targetX = 2 and targetY = 1) and !(targetX = 3 and targetY = 3) and !(targetX = 3 and targetY=4);

//Obstacles permanent locations
define obstacle1X := 0;
define obstacle1Y := 3;
define obstacle2X := 1;
define obstacle2Y := 1;
define obstacle3X := 2;
define obstacle3Y := 1;
define obstacle4X := 3;
define obstacle4Y := 3;
define obstacle5X := 3;
define obstacle5Y := 4;

env boolean noPower;
asm alwEv noPower != true;

////Moving Obstacles
env DimX movingObstacleX;
asm ini movingObstacleX = 0;


////Always eventually moving obstacle reaches both ends.
asm alwEv movingObstacleX = 0;
asm alwEv movingObstacleX = 4;

////Power
//env boolean noPower;

////Blocked targets
env boolean isBlocked1;
env boolean isBlocked2;
env boolean isBlocked3;

asm alwEv isBlocked1 = false;
asm alwEv isBlocked2 = false;
asm alwEv isBlocked3 = false;
//
//gar robotStartAtTopLeft:
//	ini robotAtStart;
//	
gar robotMovesOneStepAtATime:
	alw moveDistX(robotX) and moveDistY(robotY);

asm movingObstacleOnlyOnX:
	alw moveDistX(movingObstacleX);
	
//robotEventuallyGoesToTargets:
gar alwEv equalLocation(robotX, robotY, target1X, target1Y);
gar alwEv equalLocation(robotX, robotY, target2X, target2Y);
gar alwEv equalLocation(robotX, robotY, target3X, target3Y);

asm alw (next(target1X) = target1X and next(target1Y) = target1Y) and (next(target2X) = target2X and next(target2Y) = target2Y) and
(next(target3X) = target3X and next(target3Y) = target3Y);

gar alw !(robotX = obstacle1X and robotY = obstacle1Y) and !(robotX = obstacle2X and robotY = obstacle2Y) and
	!(robotX = obstacle3X and robotY = obstacle3Y) and !(robotX = obstacle4X and robotY = obstacle4Y) and !(robotX = obstacle5X and robotY = obstacle5Y);
gar alw !(robotX = movingObstacleX and robotY = 2);

asm alw blockLess(target1X, target1Y) implies next(isBlocked1) = false;
asm alw blockLess(target2X, target2Y) implies next(isBlocked2) = false;
asm alw blockLess(target3X, target3Y) implies next(isBlocked3) = false;

gar P_becomes_true_After_Q(robotAtStart, equalLocation(robotX, robotY, target1X, target1Y)
	or equalLocation(robotX, robotY, target2X, target2Y)
	or equalLocation(robotX, robotY, target3X, target3Y));



counter inBase(0..1){
	chargeCnt = 0;
	reset: !(robotAtStart);
	inc: (robotAtStart);
	overflow: false;
}



counter chargeCnt(0..4){
	chargeCnt = 0;
	reset: !charging;
	inc: charging and noPower = true;
	overflow: false;
}
//run out of power eventually and charge
asm alwEv noPower = true;
gar alw (noPower = true and (charging) and chargeCnt < 4) implies (next(robotX) = 4 and next(robotY) = 0);
asm alw noPower = true and chargeCnt < 4 implies noPower = true;


predicate moveDistX(DimX pos):
	pos+1 = next(pos) or
	pos   = next(pos) or
	pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
	pos+1 = next(pos) or
	pos   = next(pos) or
	pos-1 = next(pos);
	
predicate blockLess(DimX x, DimY y):
  (robotX+1 = x or robotX = x or robotX-1 = x) and (robotY+1 = y or robotY = y or robotY-1 = y);

predicate equalLocation(DimX oneX, DimY oneY, DimX twoX, DimY twoY):
	oneX = twoX and oneY = twoY;
	
predicate mightEqualLocation(DimX oneX, DimY oneY, DimX twoX, DimY twoY):
	oneX = twoX or oneY = twoY;
