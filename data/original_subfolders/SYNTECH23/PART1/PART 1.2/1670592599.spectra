import "./imports/DwyerPatterns.spectra"

spec Deliveries

define DX := 5;
define DY := 5;

type DimX = Int(0..DX);
type DimY = Int(0..DY);
type Coord = Int(0..DY);

sys DimX robotX0;
sys DimY robotY0;
sys DimX robotX1;
sys DimY robotY1;


env Coord elevatorY;
env DimX lamp_A_X;
env DimY lamp_A_Y;
env DimX lamp_B_X;
env DimY lamp_B_Y;

/**
 * moving between floors using elevator
 */
 
 //robots starts on the ground floor
 gar ini robotY0 = 5;
 gar ini robotY1 = 5;
 
 // starting point of the elevator
//asm ini elevatorY=0;
//
//predicate moveElevator(Coord pos):
//  pos+1 = next(pos) |
//  pos-1 = next(pos); 
//
//// The elevator moves just one floor up or down in every step. 
//asm alw  moveElevator(elevatorY);

// checks if robots in elevator
define inElevatorA := (robotX0=0) & (robotY0=elevatorY);
define inElevatorB := (robotX1=0) & (robotY1=elevatorY);
 

// when robot is in the elevator it can only moves with the elevator or to stay in the same floor
// we assumed that robot can't stay in the elevator column if it is not in the elevator 
predicate moveInElevator (DimX robX, DimY robY, Coord elevatorY):
	((robY = next(robY)) & (robX+1 = next(robX))) |
	((next(elevatorY) = next(robY)) &  (next(robX)=0));

gar alw inElevatorA -> moveInElevator(robotX0,robotY0, elevatorY );
gar alw inElevatorB -> moveInElevator(robotX1,robotY1, elevatorY );


// when robot is not in the elevator it can only moves on the same floor
predicate moveOutsideElevator(DimX robX, DimY robY):
	(robY = next(robY)) & 
	((robX= next(robX)) | (robX-1 = next(robX)) | (robX+1 = next(robX)));

gar alw !inElevatorA -> moveOutsideElevator(robotX0,robotY0);
gar alw !inElevatorB -> moveOutsideElevator(robotX1,robotY1);

// robots can not be in the same square
gar alw (robotX0 != robotX1) | (robotY0 != robotY1);

	
// robot can be in the elevator column only if it is inside the elevator
gar alw (robotX0=0) -> inElevatorA;
gar alw (robotX1=0) -> inElevatorB;



// robots can not crash each other
gar alw ((robotY0 = robotY1) & (robotX1> robotX0 )) -> next(robotX1>robotX0);
gar alw ((robotY0 = robotY1) & (robotX0> robotX1 )) -> next(robotX0>robotX1);


// robots need to be in lamps positions
predicate inLamp(DimX robX, DimY robY, DimX lampX, DimY lampY):
	robX=lampX & robY= lampY;

gar alwEv inLamp(robotX0, robotY0, lamp_A_X , lamp_A_Y);
gar alwEv inLamp(robotX1, robotY1, lamp_B_X , lamp_B_Y);
//
//
//asm alw lamp_A_X>0;
//asm alw lamp_B_X>0;
asm alwEv elevatorY = 5;
asm alwEv elevatorY = 0;
//asm alw (lamp_A_X != lamp_B_X) | (lamp_A_Y != lamp_B_Y);

asm alw inLamp(robotX0, robotY0, lamp_A_X , lamp_A_Y) -> next(lamp_A_Y) != lamp_A_Y;
asm alw inLamp(robotX1, robotY1, lamp_B_X , lamp_B_Y) -> next(lamp_B_Y) != lamp_B_Y;

asm alw !inLamp(robotX0, robotY0, lamp_A_X , lamp_A_Y) -> (next(lamp_A_Y) = lamp_A_Y) & (next(lamp_A_X) = lamp_A_X);
asm alw !inLamp(robotX1, robotY1, lamp_B_X , lamp_B_Y) -> (next(lamp_B_Y) = lamp_B_Y) & (next(lamp_B_X) = lamp_B_X);










