import "./imports/DwyerPatterns.spectra"

// reaching targets and left corner
spec Patrolling

define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

gar ini robotX = 0;
gar ini robotY = 0;

env DimX A_X;
env DimY A_Y;
env DimX B_X;
env DimY B_Y;
env DimX C_X;
env DimY C_Y;

predicate stayY(DimY dimy):
 next(dimy) = dimy;

predicate stayX(DimX dimx):
 next(dimx) = dimx;
 
predicate stayXY(DimX dimx, DimY dimy):
 stayX(dimx) & stayY(dimy);

//Targets should not change location during a run
asm alw stayXY(A_X, A_Y);
asm alw stayXY(B_X, B_Y);
asm alw stayXY(C_X, C_Y);

// targets != obstacles
predicate targetNotOnObstacle(DimX targetX, DimY targetY):
	! (targetX=1 & targetY=1) &	! (targetX=2 & targetY=1) &	! (targetX=0 & targetY=3) &	! (targetX=3 & targetY=3) &	! (targetX=3 & targetY=4) ;	

asm ini targetNotOnObstacle(A_X, A_Y);
asm ini targetNotOnObstacle(B_X, B_Y);
asm ini targetNotOnObstacle(C_X, C_Y);

//possible next steps of the robot
predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);
  
predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);

// possible next steps of the robot  
 gar robotMoves:
  always moveDistX(robotX) & moveDistY(robotY);
  
//req 1
// Always, sometimes in the future, the robot will visit each of the targets
gar alwEv robotX = A_X & robotY = A_Y;
gar alwEv robotX = B_X & robotY = B_Y;
gar alwEv robotX = C_X & robotY = C_Y;


// req 2
//Whenever the robot visits a target, it should eventually also visit the top left corner.  
define 
	atTarget := (robotX = A_X & robotY = A_Y) | (robotX = B_X & robotY = B_Y) | (robotX = C_X & robotY = C_Y) ;
	atLeftCorner := robotX = 0 & robotY = 0;

gar S_responds_to_P_globally(atTarget, atLeftCorner);	


//req 3
//Target may always be blocked (turned from green to red) for a finite number of states and then eventually unblocked

env boolean BlockedA;
env boolean BlockedB;
env boolean BlockedC;

asm alwEv !BlockedA;
asm alwEv !BlockedB;
asm alwEv !BlockedC;

asm ini !(A_X = 0 & A_Y = 0);
asm ini !(B_X = 0 & B_Y = 0);
asm ini !(C_X = 0 & C_Y = 0);

asm alw !(A_X = 4 & A_Y = 0);
asm alw !(B_X = 4 & B_Y = 0);
asm alw !(C_X = 4 & C_Y = 0);

//moving obstacle
env DimX movingObstacle_X;
env DimY movingObstacle_Y;
asm alw movingObstacle_Y = 2;

//???
//We don't want that the next step of the robot and the moving obstacle will be to the same place, which is also a target
gar alw (A_X = next(movingObstacle_X)) -> (next(robotX) != A_X);
gar alw (B_X = next(movingObstacle_X)) -> (next(robotX) != B_X);
gar alw (C_X = next(movingObstacle_X)) -> (next(robotX) != C_X);

predicate samePlace(DimX dim1x, DimY dim1y, DimX dim2x, DimY dim2y):
dim1x = dim2x & dim1y = dim2y;

//There should be 3 different targets
asm alw !samePlace(A_X, A_Y, B_X, B_Y);
asm alw !samePlace(B_X, B_Y, C_X, C_Y);
asm alw !samePlace(A_X, A_Y, C_X, C_Y);




//////////////////////////////


