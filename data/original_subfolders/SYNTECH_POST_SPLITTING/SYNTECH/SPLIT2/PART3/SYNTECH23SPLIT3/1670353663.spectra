import "./imports/DwyerPatterns.spectra"

spec Patrolling

type Dim = Int(0..4);

sys Dim[2] robot;
env boolean obstacleMovesRight;
env Dim[3][2] goals;
env boolean[3] isGoalBlocked;
env Dim movingObstacleX;
env boolean lowBattery;

define
movingObstacleY := 2; 
robotInStartingPoint:= robot[0] = 0 & robot[1] = 0;
robotAtChargingStation:= robot[0] = 4 & robot[1] = 0; 

robotAtGoalA:= robotAtGoal(0);
robotAtGoalB:= robotAtGoal(1);
robotAtGoalC:= robotAtGoal(2);
robotAtAnyGoal := robotAtGoalA | robotAtGoalB | robotAtGoalC;

robotAtMovingObstacle:= robot[0] = movingObstacleX & robot[1] = movingObstacleY;
robotAtObstacle:= (robot[0] = 1 & robot[1] = 1) | (robot[0] = 3 & robot[1] = 3) |
				  (robot[0] = 2 & robot[1] = 1) | (robot[0] = 0 & robot[1] = 3) |
				  (robot[0] = 3 & robot[1] = 4);

asm alwEv isGoalBlocked[0] = false;
asm alwEv isGoalBlocked[1] = false;
asm alwEv isGoalBlocked[2] = false;

asm alw isGoalBlocked[0] -> isGoalBlocked[1] = false & isGoalBlocked[2] = false;
asm alw isGoalBlocked[1] -> isGoalBlocked[0] = false & isGoalBlocked[2] = false;
asm alw isGoalBlocked[2] -> isGoalBlocked[0] = false & isGoalBlocked[1] = false;

asm always goalsAreFixed();
asm always GoalNotAtOtherGoal(0,1);
asm always GoalNotAtOtherGoal(1,2);
asm always GoalNotAtOtherGoal(0,2);

asm always goalsLocationIsKnown(0);
asm always goalsLocationIsKnown(1);
asm always goalsLocationIsKnown(2);

asm alwEv movingObstacleX = 0;
asm alwEv movingObstacleX = 4;
asm alw moveDist(movingObstacleX);

asm alwEv movingObstacleX != goals[0][0];
asm alwEv movingObstacleX != goals[1][0];
asm alwEv movingObstacleX != goals[2][0];

asm alw obstacleMovesRight -> (movingObstacleX = next(movingObstacleX)) | (movingObstacleX + 1 = next(movingObstacleX));
asm alw !obstacleMovesRight -> (movingObstacleX = next(movingObstacleX)) | (movingObstacleX -1 = next(movingObstacleX));

asm trig [true]*[movingObstacleX = 0] |=> [obstacleMovesRight]{4,};
asm trig [true]*[movingObstacleX = 4] |=> [!obstacleMovesRight]{4,};

gar ini robot[0] = 0;
gar ini robot[1] = 0;

gar alwEv robotAtGoalA;
gar alwEv robotAtGoalB;
gar alwEv robotAtGoalC;

gar robotMoves:
always moveDist(robot[0]) & moveDist(robot[1]);

gar visitStartPointAfterGoalA:
S_responds_to_P_globally(robotInStartingPoint, robotAtAnyGoal);

gar alw isGoalBlocked[0] -> !robotAtGoalA;
gar alw isGoalBlocked[1] -> !robotAtGoalB;
gar alw isGoalBlocked[2] -> !robotAtGoalC;

gar alw !robotAtMovingObstacle;
gar alw !robotAtObstacle;

gar trig [true]*[lowBattery] |=> [true]*[robotAtChargingStation]{4,};

predicate moveDist(Dim pos):
  pos+1 = next (pos) |
pos = next (pos) |
pos-1 = next (pos) ;

predicate robotAtGoal(Int(0..3) index):
	robot[0] = goals[index][0] & robot[1] = goals[index][1];

predicate GoalNotAtOtherGoal(Int(0..3) i, Int(0..3) j):
	(goals[i][0] != goals[j][0]) | (goals[i][1] != goals[j][1]);
	
predicate goalsLocationIsKnown(Int(0..3) i):
	(goals[i][0] = 0 & goals[i][1] = 1) | (goals[i][0] = 0 & goals[i][1] = 4) |
	(goals[i][0] = 1 & goals[i][1] = 0) | (goals[i][0] = 1 & goals[i][1] = 3) |
	(goals[i][0] = 1 & goals[i][1] = 4) | (goals[i][0] = 0 & goals[i][1] = 2) |
	(goals[i][0] = 2 & goals[i][1] = 0) | (goals[i][0] = 2 & goals[i][1] = 3) |
	(goals[i][0] = 2 & goals[i][1] = 4) | (goals[i][0] = 3 & goals[i][1] = 0) |
	(goals[i][0] = 3 & goals[i][1] = 1) | (goals[i][0] = 1 & goals[i][1] = 2) |
	(goals[i][0] = 4 & goals[i][1] = 1) | (goals[i][0] = 4 & goals[i][1] = 3) |
	(goals[i][0] = 4 & goals[i][1] = 4) | (goals[i][0] = 2 & goals[i][1] = 2) |
	(goals[i][0] = 3 & goals[i][1] = 2) | (goals[i][0] = 4 & goals[i][1] = 2);
	
predicate goalsAreFixed():
	(goals[0][0] = next(goals[0][0])) & (goals[0][1] = next(goals[0][1])) &
	(goals[1][0] = next(goals[1][0])) & (goals[1][1] = next(goals[1][1])) &
	(goals[2][0] = next(goals[2][0])) & (goals[2][1] = next(goals[2][1]));
	

   