import "./imports/DwyerPatterns.spectra"

/**
 * module that describes obstacles behavior.
 */
 
spec PatrollingTeam8Integration


define DX := 4;
define DY := 4;

type DimX = Int(0..DX);
type DimY = Int(0..DY);

sys DimX robotX;
sys DimY robotY;

define D := 4;

/**
  * module 1
  */

/**
 * creating obstacles
 */
type Dim = Int(0..D);
env Dim[2] fixedObstacle1;
env Dim[2] fixedObstacle2;
env Dim[2] fixedObstacle3;
env Dim[2] fixedObstacle4;
env Dim[2] fixedObstacle5;
env Dim[2] movingObstacle;


/**
 * fixed obstacle does not move
 */
asm alw (fixedObstacle1[0]=1) & (fixedObstacle1[1] = 1);
asm alw (fixedObstacle2[0]=2) & (fixedObstacle2[1] = 1);
asm alw (fixedObstacle3[0]=0) & (fixedObstacle3[1] = 3);
asm alw (fixedObstacle4[0]=3) & (fixedObstacle4[1] = 3);
asm alw (fixedObstacle5[0]=3) & (fixedObstacle5[1] = 4);

/**
 * moving obstacle starts at fixed location
 */
asm alw (movingObstacle[1] = 2);
 
/**
 * obstacle can move only on X-axis
 */
predicate moveDist(Dim pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos); 
 
asm obstacleMoves: always moveDist(movingObstacle[0]); 

/**
 * obstacle can not stay on target square forever , and should visit both ends of the row
infinitely often
 */
asm alwEv movingObstacle[0] = 0;
asm alwEv movingObstacle[0] = 4;

/**
 * robot never crashes into the obstacles
 */

predicate notOnObstacle(DimX rX, DimX rY, Dim oX, Dim oY):
	(rX != oX) |
	(rY != oY) 
	;

gar alw notOnObstacle(robotX, robotY, movingObstacle[0], movingObstacle[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle1[0], fixedObstacle1[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle2[0], fixedObstacle2[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle3[0], fixedObstacle3[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle4[0], fixedObstacle4[1]);
gar alw notOnObstacle(robotX, robotY, fixedObstacle5[0], fixedObstacle5[1]);

 
 /**
  * module 2
  */
 
/**
 * creating targets
 */
type Dim = Int(0..D);
env Dim[2] target1;
env Dim[2] target2;
env Dim[2] target3;



/**
 * targets can not be on fixed obstacles
 */
predicate targetNotOnObstacle(Dim posX, Dim posY):
	! (posX=1 & posY=1) &
	! (posX=2 & posY=1) &
	! (posX=0 & posY=3) &
	! (posX=3 & posY=3) &
	! (posX=3 & posY=4) ;
	
asm ini targetNotOnObstacle(target1[0], target1[1]);
asm ini targetNotOnObstacle(target2[0], target2[1]);
asm ini targetNotOnObstacle(target3[0], target3[1]);


/**
 * targets don't move forever
 */ 
asm alw (target1[0]=next(target1[0])) & (target1[1]=next(target1[1]));
asm alw (target2[0]=next(target2[0])) & (target2[1]=next(target2[1]));
asm alw (target3[0]=next(target3[0])) & (target3[1]=next(target3[1]));
 
 
 /**
  * robot starts at the top left corner
  */
 
gar ini robotX=0 & robotY=0; 
 
/**
  * robot always eventually reaches targets
  */
gar alwEv robotX=target1[0] & robotY=target1[1];
gar alwEv robotX=target2[0] & robotY=target2[1];
gar alwEv robotX=target3[0] & robotY=target3[1];
 

/**
 * guarantee for section 2 in the instructions paper- robot has to go back to the top left corner after he visits the targets
 */
gar alwEv robotX=0 & robotY=0; 
 
 
 /**
  * robot can move one square at a time
  */
  
gar robotMoves: always moveDist(robotX) & moveDist(robotY); 
 
 /**
  * module 3
  */
 
 
/**
 * once in a while robot goes to the charger
 */
define atCharger := robotX = 4 & robotY =0;
gar alwEv atCharger;


counter staysAtCharger(0..4){
	staysAtCharger = 0;
	inc: atCharger;
	reset: !atCharger;
	overflow: keep;
}
/**
 * robot charges for at least 4 states
 */
gar robotCharges :  alw ((staysAtCharger < 4) & (atCharger)) -> next(atCharger); 
 
 
 
 
 
 
 